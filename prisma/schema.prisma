// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id                String    @id @default(cuid())
  name              String?
  email             String    @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  resetToken        String?
  resetTokenExpires DateTime?
  role              Role      @default(USER)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  goals         Goal[]
  tasks         Task[]
  projects      Project[]
  notes         Note[]
  events        Event[]
  resources     Resource[]
  teamMembers   TeamMember[]
  categories    Category[]
  futureVisions FutureVision[]
}

enum Role {
  USER
  ADMIN
  TEAM_MEMBER
}

// Life Categories
model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  isPreset    Boolean  @default(false)
  priority    Int      @default(0) // Higher number = higher priority
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  futureVisions FutureVision[]
  goals         Goal[]
  
  @@index([userId])
  @@unique([userId, name]) // Each user can only have unique category names
}

// Future Vision
model FutureVision {
  id            String   @id @default(cuid())
  description   String
  year          Int
  yearEndReflection String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId    String
  category      Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([categoryId])
  @@unique([userId, categoryId, year]) // One vision per category per year per user
}

// Goals
model Goal {
  id          String    @id @default(cuid())
  title       String
  description String?
  criteria    Json?     // SMART criteria as JSON
  targetValue Float?    // Numerical target if applicable
  currentValue Float?   // Current progress if applicable
  timeframe   TimeFrame @default(ANNUAL)
  startDate   DateTime
  endDate     DateTime?
  status      Status    @default(IN_PROGRESS)
  priority    Priority  @default(MEDIUM)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  
  // Parent-child relationship
  parentId    String?
  parent      Goal?     @relation("GoalHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  subgoals    Goal[]    @relation("GoalHierarchy")
  
  tasks       Task[]
  projects    Project[]
  
  @@index([userId])
  @@index([categoryId])
  @@index([parentId])
}

// Tasks
model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  status      Status    @default(TODO)
  priority    Priority  @default(MEDIUM)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  goalId      String?
  goal        Goal?     @relation(fields: [goalId], references: [id], onDelete: SetNull)
  projectId   String?
  project     Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([goalId])
  @@index([projectId])
}

// Projects
model Project {
  id          String      @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime?
  status      Status      @default(IN_PROGRESS)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  goalId      String?
  goal        Goal?       @relation(fields: [goalId], references: [id])
  tasks       Task[]
  notes       Note[]
  resources   Resource[]
  teamMembers TeamMember[]
  
  @@index([userId])
  @@index([goalId])
}

// Team Members
model TeamMember {
  id        String   @id @default(cuid())
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, userId])
  @@index([userId])
  @@index([projectId])
}

// Notes
model Note {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([projectId])
}

// Calendar Events
model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  allDay      Boolean  @default(false)
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// Resources
model Resource {
  id        String   @id @default(cuid())
  title     String
  type      String   // FILE, LINK, etc.
  url       String?
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([projectId])
}

enum Status {
  TODO
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TimeFrame {
  ANNUAL
  QUARTERLY
  MONTHLY
  WEEKLY
  DAILY
}
